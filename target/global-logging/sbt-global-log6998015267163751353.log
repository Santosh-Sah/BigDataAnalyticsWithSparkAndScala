[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\SANTOS~1\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\SANTOS~1\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.3 (Oracle Corporation Java 1.8.0_181)
[debug]       Load.loadUnit: plugins took 112.8746ms
[debug]       Load.loadUnit: defsScala took 0.3205ms
[debug] [Loading] Scanning directory C:\Users\Santosh Sah\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Santosh Sah\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 26.878 ms
[debug]           Load.resolveProject(global-plugins) took 48.8293ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Santosh Sah\.sbt\1.0\plugins, plugins: List(<none>))) took 101.6007ms
[debug] [Loading] Done in C:\Users\Santosh Sah\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 124.5019ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2787ms
[debug]     Load.loadUnit(file:/C:/Users/Santosh%20Sah/.sbt/1.0/plugins/, ...) took 247.2578ms
[debug]   Load.apply: load took 416.3205ms
[debug]   Load.apply: resolveProjects took 7.2332ms
[debug]   Load.apply: finalTransforms took 74.0273ms
[debug]   Load.apply: config.delegates took 13.4472ms
[debug]   Load.apply: Def.make(settings)... took 1365.7237ms
[debug]   Load.apply: structureIndex took 201.5175ms
[debug]   Load.apply: mkStreams took 4.2815ms
[info] loading global plugins from C:\Users\Santosh Sah\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 5972.8588ms
[debug]           Load.loadUnit: plugins took 44.0857ms
[debug]           Load.loadUnit: defsScala took 0.0049ms
[debug] [Loading] Scanning directory C:\BigDataAnalyticsWithSparkAndScala\BigDataAnalyticsWithSparkAndScala\project
[debug]             Load.loadUnit: mkEval took 13.9415ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\BigDataAnalyticsWithSparkAndScala\BigDataAnalyticsWithSparkAndScala\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.0369 ms
[info] loading settings for project bigdataanalyticswithsparkandscala-build from idea.sbt ...
[debug]               Load.resolveProject(bigdataanalyticswithsparkandscala-build) took 18.4562ms
[debug]             Load.loadTransitive: finalizeProject(Project(id bigdataanalyticswithsparkandscala-build, base: C:\BigDataAnalyticsWithSparkAndScala\BigDataAnalyticsWithSparkAndScala\project, plugins: List(<none>))) took 22.3729ms
[debug] [Loading] Done in C:\BigDataAnalyticsWithSparkAndScala\BigDataAnalyticsWithSparkAndScala\project, returning: (bigdataanalyticswithsparkandscala-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 4190.4294ms
[debug]           Load.loadUnit: cleanEvalClasses took 7.7588ms
[debug]         Load.loadUnit(file:/C:/BigDataAnalyticsWithSparkAndScala/BigDataAnalyticsWithSparkAndScala/project/, ...) took 4243.611ms
[debug]       Load.apply: load took 4245.7196ms
[debug]       Load.apply: resolveProjects took 0.1475ms
[debug]       Load.apply: finalTransforms took 19.3462ms
[debug]       Load.apply: config.delegates took 0.7277ms
[debug]       Load.apply: Def.make(settings)... took 161.7683ms
[debug]       Load.apply: structureIndex took 48.9639ms
[debug]       Load.apply: mkStreams took 0.0047ms
[info] loading project definition from C:\BigDataAnalyticsWithSparkAndScala\BigDataAnalyticsWithSparkAndScala\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 6687.5829ms
[debug]     Load.loadUnit: defsScala took 0.0045ms
[debug] [Loading] Scanning directory C:\BigDataAnalyticsWithSparkAndScala\BigDataAnalyticsWithSparkAndScala
[debug]       Load.loadUnit: mkEval took 0.3912ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\BigDataAnalyticsWithSparkAndScala\BigDataAnalyticsWithSparkAndScala, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 4.8293 ms
[info] loading settings for project bigdataanalyticswithsparkandscala from build.sbt ...
[debug]         Load.resolveProject(bigdataanalyticswithsparkandscala) took 65.5704ms
[debug]       Load.loadTransitive: finalizeProject(Project(id bigdataanalyticswithsparkandscala, base: C:\BigDataAnalyticsWithSparkAndScala\BigDataAnalyticsWithSparkAndScala, plugins: List(<none>))) took 73.3446ms
[debug] [Loading] Done in C:\BigDataAnalyticsWithSparkAndScala\BigDataAnalyticsWithSparkAndScala, returning: (bigdataanalyticswithsparkandscala)
[debug]     Load.loadUnit: loadedProjectsRaw took 2467.0389ms
[debug]     Load.loadUnit: cleanEvalClasses took 29.2768ms
[debug]   Load.loadUnit(file:/C:/BigDataAnalyticsWithSparkAndScala/BigDataAnalyticsWithSparkAndScala/, ...) took 9185.1351ms
[debug] Load.apply: load took 9188.9572ms
[debug] Load.apply: resolveProjects took 0.2559ms
[debug] Load.apply: finalTransforms took 53.5697ms
[debug] Load.apply: config.delegates took 0.7914ms
[debug] Load.apply: Def.make(settings)... took 161.8409ms
[debug] Load.apply: structureIndex took 48.0722ms
[debug] Load.apply: mkStreams took 0.0048ms
[info] set current project to BigDataAnalyticsWithSparkAndScala (in build file:/C:/BigDataAnalyticsWithSparkAndScala/BigDataAnalyticsWithSparkAndScala/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 63077 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 63077, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to BigDataAnalyticsWithSparkAndScala (in build file:/C:/BigDataAnalyticsWithSparkAndScala/BigDataAnalyticsWithSparkAndScala/)
[debug] > Exec(idea-shell, None, None)
